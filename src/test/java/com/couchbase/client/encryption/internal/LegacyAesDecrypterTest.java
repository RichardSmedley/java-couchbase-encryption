/*
 * Copyright (c) 2021 Couchbase, Inc.
 *
 * Use of this software is subject to the Couchbase Inc. Enterprise Subscription License Agreement v7
 * which may be found at https://www.couchbase.com/ESLA01162020.
 */

package com.couchbase.client.encryption.internal;

import com.couchbase.client.core.encryption.CryptoManager;
import com.couchbase.client.encryption.DefaultCryptoManager;
import com.couchbase.client.encryption.Keyring;
import com.couchbase.client.java.json.JsonObject;
import com.couchbase.client.java.json.JsonObjectCrypto;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

class LegacyAesDecrypterTest {

  @Test
  void canDecrypt() {
    Map<String, byte[]> keys = new HashMap<>();
    keys.put("aes256Key", fakeKey(32));
    keys.put("aes128Key", fakeKey(16));
    keys.put("hmacKey", fakeKey(7));
    Keyring keyring = Keyring.fromMap(keys);

    // Generated by Java FLE version 1
    JsonObject obj = JsonObject.fromJson(
        "{\n" +
            "  \"__crypt_one\": {\n" +
            "    \"sig\": \"TkpyZnha4xd+FsX1aEGqB235d495oOUBfC4Y+Gbic4U=\",\n" +
            "    \"ciphertext\": \"MZI/xSiM7919UTM5CO/RWg==\",\n" +
            "    \"alg\": \"AES-128-HMAC-SHA256\",\n" +
            "    \"iv\": \"HIBdmnoQD4DUgkBj5LAMFw==\",\n" +
            "    \"kid\": \"aes128Key\"\n" +
            "  },\n" +
            "  \"__crypt_two\": {\n" +
            "    \"sig\": \"f0hWVdBM/pEcADl0eKx8Eq/KhP00/2oqXYXTJkt2xhA=\",\n" +
            "    \"ciphertext\": \"biERBQajaRxrfe8mXFqJag==\",\n" +
            "    \"alg\": \"AES-256-HMAC-SHA256\",\n" +
            "    \"iv\": \"03AUmzwQqnbs/JhkWGrIkw==\",\n" +
            "    \"kid\": \"aes256Key\"\n" +
            "  }\n" +
            "}");

    CryptoManager cryptoManager = DefaultCryptoManager.builder()
        .encryptedFieldNamePrefix("__crypt_")
        .legacyAesDecrypters(keyring, keyName -> "hmacKey")
        .build();

    JsonObjectCrypto crypto = obj.crypto(cryptoManager);

    assertEquals(1, crypto.getInt("one"));
    assertEquals(2, crypto.getInt("two"));
  }

  private static byte[] fakeKey(int len) {
    byte[] result = new byte[len];
    for (int i = 0; i < len; i++) {
      result[i] = (byte) i;
    }
    return result;
  }
}
